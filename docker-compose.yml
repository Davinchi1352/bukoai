# ===========================================
# BUKO AI - DOCKER COMPOSE
# ===========================================

version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:16-alpine
    container_name: buko-ai-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-buko_ai}
      POSTGRES_USER: ${DB_USER:-user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-user} -d ${DB_NAME:-buko_ai}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - buko-ai-network

  # Redis para cache y colas
  redis:
    image: redis:7-alpine
    container_name: buko-ai-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6380}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - buko-ai-network

  # Aplicaci√≥n web principal
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: buko-ai-web
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - DATABASE_URL=postgresql://${DB_USER:-user}:${DB_PASSWORD:-password}@db:5432/${DB_NAME:-buko_ai}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - MP_ACCESS_TOKEN=${MP_ACCESS_TOKEN}
    volumes:
      - ./storage:/storage
      - ./logs:/app/logs
    ports:
      - "${WEB_PORT:-5001}:5000"
    command: web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - buko-ai-network

  # Celery worker para tareas en background
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: buko-ai-worker
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - DATABASE_URL=postgresql://${DB_USER:-user}:${DB_PASSWORD:-password}@db:5432/${DB_NAME:-buko_ai}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    volumes:
      - ./storage:/storage
      - ./logs:/app/logs
    command: worker
    healthcheck:
      test: ["CMD", "celery", "-A", "app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - buko-ai-network

  # Celery beat para tareas programadas
  beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: buko-ai-beat
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - DATABASE_URL=postgresql://${DB_USER:-user}:${DB_PASSWORD:-password}@db:5432/${DB_NAME:-buko_ai}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./storage:/storage
      - ./logs:/app/logs
    command: beat
    networks:
      - buko-ai-network

  # Flower para monitoreo de Celery
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: buko-ai-flower
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    command: flower
    networks:
      - buko-ai-network

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: buko-ai-nginx
    restart: unless-stopped
    depends_on:
      - web
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./storage:/storage:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - buko-ai-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  buko-ai-network:
    driver: bridge