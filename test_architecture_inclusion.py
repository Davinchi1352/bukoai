#!/usr/bin/env python3
"""
Script para verificar que la arquitectura completa se incluye en los prompts de generaci√≥n de chunks
"""

import sys
import os

# Add project root to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.services.claude_service import ClaudeService

def test_complete_book_structure():
    """Test que el m√©todo _build_complete_book_structure funciona correctamente"""
    
    service = ClaudeService()
    
    # Crear una arquitectura de ejemplo
    test_architecture = {
        'structure': {
            'introduction': {
                'title': 'Introducci√≥n al Tema',
                'summary': 'Introducci√≥n general al libro',
                'pages': 3
            },
            'chapters': [
                {
                    'title': 'Fundamentos B√°sicos',
                    'summary': 'Conceptos fundamentales del tema',
                    'pages': 15,
                    'key_points': ['Concepto A', 'Concepto B', 'Concepto C']
                },
                {
                    'title': 'T√©cnicas Avanzadas',
                    'summary': 'M√©todos y t√©cnicas avanzadas',
                    'pages': 20,
                    'key_points': ['T√©cnica X', 'T√©cnica Y']
                },
                {
                    'title': 'Casos Pr√°cticos',
                    'summary': 'Ejemplos reales de implementaci√≥n',
                    'pages': 18,
                    'key_points': ['Caso 1', 'Caso 2', 'Caso 3']
                }
            ],
            'conclusion': {
                'title': 'Conclusiones',
                'summary': 'Reflexiones finales y pr√≥ximos pasos',
                'pages': 4
            }
        }
    }
    
    # Probar el m√©todo
    structure_text = service._build_complete_book_structure(test_architecture)
    
    print("üß™ TEST: Verificaci√≥n de estructura completa del libro")
    print("=" * 60)
    print(structure_text)
    print("=" * 60)
    
    # Verificaciones
    assert 'INTRODUCCI√ìN: Introducci√≥n al Tema' in structure_text
    assert 'CAP√çTULO 1: Fundamentos B√°sicos' in structure_text
    assert 'CAP√çTULO 2: T√©cnicas Avanzadas' in structure_text
    assert 'CAP√çTULO 3: Casos Pr√°cticos' in structure_text
    assert 'CONCLUSI√ìN: Conclusiones' in structure_text
    assert 'NO generes contenido que ya pertenezca a otros cap√≠tulos' in structure_text
    assert 'Concepto A, Concepto B, Concepto C' in structure_text
    
    print("‚úÖ TODOS LOS TESTS PASARON")
    print("\nüìã VERIFICACIONES REALIZADAS:")
    print("- ‚úÖ Incluye introducci√≥n con t√≠tulo y resumen")
    print("- ‚úÖ Lista todos los cap√≠tulos con t√≠tulos y res√∫menes")
    print("- ‚úÖ Incluye p√°ginas estimadas para cada secci√≥n")
    print("- ‚úÖ Muestra puntos clave de cada cap√≠tulo")
    print("- ‚úÖ Incluye conclusi√≥n")
    print("- ‚úÖ Contiene advertencia sobre no duplicaci√≥n")
    
def test_chunk_messages_structure():
    """Test que verifica que _build_chunk_messages incluya la estructura completa"""
    
    service = ClaudeService()
    
    # Arquitectura de ejemplo
    test_architecture = {
        'title': 'Libro de Prueba',
        'summary': 'Descripci√≥n del libro de prueba',
        'genre': 'Educational',
        'target_audience': 'Estudiantes',
        'tone': 'Profesional',
        'writing_style': 'Academic but accessible',
        'structure': {
            'chapters': [
                {'title': 'Cap√≠tulo 1', 'summary': 'Primer cap√≠tulo', 'pages': 10},
                {'title': 'Cap√≠tulo 2', 'summary': 'Segundo cap√≠tulo', 'pages': 12}
            ]
        }
    }
    
    # Par√°metros del libro
    book_params = {
        'title': 'Libro de Prueba',
        'language': 'es',
        'genre': 'Educational'
    }
    
    # Info del chunk
    chunk_info = {
        'index': 1,
        'chapters': [
            {'title': 'Cap√≠tulo 1', 'summary': 'Primer cap√≠tulo', 'pages': 10, 'estimated_pages': 10}
        ],
        'start_chapter': 1,
        'target_pages': 10
    }
    
    # Generar mensajes
    messages = service._build_chunk_messages(
        chunk_info, book_params, test_architecture, "", []
    )
    
    # Verificar que el mensaje contiene la estructura completa
    user_content = messages[0]['content'][0]['text']
    
    print("\nüß™ TEST: Verificaci√≥n de inclusi√≥n de estructura en prompts de chunks")
    print("=" * 60)
    print("FRAGMENTO DEL PROMPT GENERADO:")
    print("-" * 30)
    # Mostrar solo la parte relevante
    start_idx = user_content.find('ESTRUCTURA COMPLETA DEL LIBRO')
    end_idx = user_content.find('ESPECIFICACIONES DE FORMATO')
    if start_idx != -1 and end_idx != -1:
        print(user_content[start_idx:end_idx])
    print("=" * 60)
    
    # Verificaciones
    assert 'ESTRUCTURA COMPLETA DEL LIBRO' in user_content
    assert 'NO duplicar contenido entre ellos' in user_content
    assert 'CAP√çTULO 1: Cap√≠tulo 1' in user_content
    assert 'CAP√çTULO 2: Cap√≠tulo 2' in user_content
    assert 'NO generes contenido que ya pertenezca a otros cap√≠tulos' in user_content
    assert 'NO DUPLICACI√ìN' in user_content
    
    print("‚úÖ VERIFICACI√ìN DE PROMPT COMPLETADA")
    print("\nüìã VERIFICACIONES REALIZADAS:")
    print("- ‚úÖ El prompt incluye 'ESTRUCTURA COMPLETA DEL LIBRO'")
    print("- ‚úÖ Lista todos los cap√≠tulos del libro")
    print("- ‚úÖ Incluye advertencia sobre no duplicaci√≥n")
    print("- ‚úÖ Agrega instrucci√≥n espec√≠fica sobre NO DUPLICACI√ìN")

if __name__ == "__main__":
    print("üöÄ INICIANDO TESTS DE VERIFICACI√ìN DE ARQUITECTURA")
    print()
    
    try:
        test_complete_book_structure()
        test_chunk_messages_structure()
        
        print("\n" + "="*60)
        print("üéâ CERTIFICACI√ìN COMPLETA - TODOS LOS TESTS PASARON")
        print("="*60)
        print("\n‚úÖ GARANT√çAS VERIFICADAS:")
        print("1. Cada chunk recibe la arquitectura completa del libro")
        print("2. Se incluye informaci√≥n de TODOS los cap√≠tulos")
        print("3. Se advierte espec√≠ficamente sobre NO duplicar contenido")
        print("4. La informaci√≥n se formatea de manera clara y legible")
        print("5. Se incluye tanto en generaci√≥n normal como paralela")
        print("6. Tambi√©n se incluye en expansi√≥n org√°nica de contenido")
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN LOS TESTS: {e}")
        sys.exit(1)